# Generated by Django 2.1.1 on 2018-11-13 00:15

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import jobs.models
import taggit.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_employer', models.BooleanField(default=False)),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('password', models.CharField(default='', max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('company_name', models.CharField(blank=True, max_length=200)),
                ('company_logo', models.FileField(blank=True, null=True, upload_to='company_logo/%Y/%m/%d/')),
                ('company_summary', models.CharField(blank=True, max_length=6000)),
                ('application_inbox', models.EmailField(blank=True, default='', max_length=254)),
                ('first_name', models.CharField(blank=True, max_length=200)),
                ('last_name', models.CharField(blank=True, max_length=200)),
                ('profile_photo', models.ImageField(blank=True, null=True, upload_to='profile_photo/%Y/%m/%d/')),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('jwt_secret', models.UUIDField(default=uuid.uuid4)),
            ],
            options={
                'ordering': ['created_date'],
            },
            managers=[
                ('objects', jobs.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='JobPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(blank=True, max_length=200)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('company_logo', models.ImageField(blank=True, null=True, upload_to='job_post/company_logo/%Y/%m/%d/')),
                ('description', models.CharField(blank=True, max_length=12000)),
                ('job_location', models.CharField(blank=True, max_length=200)),
                ('requirements', models.CharField(blank=True, max_length=12000, null=True)),
                ('min_salary', models.IntegerField(blank=True, null=True)),
                ('max_salary', models.IntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('published_date', models.DateTimeField(blank=True, null=True)),
                ('post_expiration', models.DateTimeField(blank=True, default=None, null=True)),
            ],
            options={
                'ordering': ['-post_expiration'],
            },
        ),
        migrations.CreateModel(
            name='UserPayment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_token', models.CharField(blank=True, max_length=128)),
                ('purchased', models.CharField(choices=[('sku_DoNhM1EGgKGLeg', '1 Post'), ('sku_DoNp2frdbkieqn', '12 Posts'), ('plan_DoNu8JmqFRMrze', 'Unlimited Posts')], max_length=30)),
                ('quantity', models.IntegerField(default=1)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='UserMembership',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('stripe_id', models.CharField(max_length=40)),
                ('subscription', models.CharField(choices=[('F', 'Free'), ('plan_DoNu8JmqFRMrze', 'Unlimited')], default='F', max_length=30)),
                ('job_credit', models.IntegerField(blank=True, default=0)),
            ],
        ),
        migrations.AddField(
            model_name='userpayment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='jobpost',
            name='company',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='jobpost',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='Enter tags separated by commas', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
